// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  SELLER
}

model User {
  id        String   @id @default(uuid())
  name      String?
  email     String   @unique
  image     String?
  role      Role     @default(USER)
  provider  String?
  providerId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  accounts  Account[]
  sessions  Session[] // Tambah relasi ke Session
  stores    Store[]  @relation("StoreOwner")
  reviews   Review[] @relation("UserReviews")
  orders    Order[]  @relation("UserOrders")
}

model Account {
  id                String   @id @default(uuid())
  userId            String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Store {
  id          Int        @id @default(autoincrement())
  name        String
  slug        String     @unique
  logo        String?
  description String?
  location    String?
  ownerId     String
  owner       User       @relation("StoreOwner", fields: [ownerId], references: [id])
  products    Product[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  isApproved  Boolean    @default(false)
}

model Product {
  id          Int           @id @default(autoincrement())
  name        String
  price       Int
  stock       Int
  slug        String        @unique
  description String?
  storeId     Int?
  store       Store?        @relation(fields: [storeId], references: [id])
  images      ProductImage[]
  reviews     Review[]
  orders      OrderItem[]
  categories  Category[]    @relation("ProductCategories")
  trending    Trending?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime?     @updatedAt
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  url       String
  productId Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    String
  user      User     @relation("UserReviews", fields: [userId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id        Int      @id @default(autoincrement())
  name      String
  slug      String   @unique
  imageUrl  String
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  slug      String    @unique
  products  Product[] @relation("ProductCategories")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Order {
  id          Int         @id @default(autoincrement())
  userId      String
  user        User        @relation("UserOrders", fields: [userId], references: [id])
  total       Int
  status      String      @default("PENDING")
  orderItems  OrderItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Int
  createdAt DateTime @default(now())
}

model Trending {
  id        Int      @id @default(autoincrement())
  productId Int      @unique
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  rank      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}