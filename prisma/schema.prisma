generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String            @id @default(uuid())
  name        String?
  email       String            @unique
  password    String?           // Ditambahkan field password
  provider    String?
  providerId  String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  role        Role              @default(USER)
  image       String?
  bio         String?
  location    String?           @db.VarChar(255)
  join_date   DateTime?         @default(now()) @db.Timestamp(6)
  cover_pic   String?           @db.VarChar(255)
  username    String?           @unique @db.VarChar(100)
  accounts    Account[]
  orders      Order[]           @relation("UserOrders")
  pinnedItems PinnedItems[]
  reviews     Review[]          @relation("UserReviews")
  sessions    Session[]
  stores      Store[]           @relation("StoreOwner")
  preferences UserPreferences?
  socialLinks UserSocialLinks[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Store {
  id          Int       @id @default(autoincrement())
  name        String
  slug        String    @unique
  logo        String?
  description String?
  location    String?
  ownerId     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isApproved  Boolean   @default(false)
  products    Product[]
  owner       User      @relation("StoreOwner", fields: [ownerId], references: [id])
}

model Product {
  name        String
  price       Int
  stock       Int
  createdAt   DateTime       @default(now())
  description String?
  slug        String         @unique
  id          Int            @id @default(autoincrement())
  storeId     Int?
  updatedAt   DateTime?      @updatedAt
  orders      OrderItem[]
  pinnedBy    PinnedItems[]
  store       Store?         @relation(fields: [storeId], references: [id])
  images      ProductImage[]
  reviews     Review[]
  trending    Trending?
  categories  Category[]     @relation("ProductCategories")
}

model ProductImage {
  url       String
  id        Int     @id @default(autoincrement())
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    String
  productId Int
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation("UserReviews", fields: [userId], references: [id])
}

model Event {
  id        Int      @id @default(autoincrement())
  name      String
  slug      String   @unique
  imageUrl  String
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  slug      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[] @relation("ProductCategories")
}

model Order {
  id         Int         @id @default(autoincrement())
  userId     String
  total      Int
  status     String      @default("PENDING")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  user       User        @relation("UserOrders", fields: [userId], references: [id])
  orderItems OrderItem[]
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Int
  createdAt DateTime @default(now())
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])
}

model Trending {
  id        Int      @id @default(autoincrement())
  productId Int      @unique
  rank      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model UserSocialLinks {
  id         Int       @id @default(autoincrement())
  user_id    String
  platform   String    @db.VarChar(50)
  url        String    @db.VarChar(255)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @updatedAt @db.Timestamp(6)
  user       User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, platform])
  @@index([user_id], map: "idx_user_social_links_user_id")
  @@map("UserSocialLinks")
}

model PinnedItems {
  id         Int       @id @default(autoincrement())
  user_id    String
  product_id Int?
  name       String    @db.VarChar(255)
  image      String?   @db.VarChar(255)
  position   Int
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  product    Product?  @relation(fields: [product_id], references: [id], onUpdate: NoAction)
  user       User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id], map: "idx_pinned_items_user_id")
  @@map("PinnedItems")
}

model UserPreferences {
  id                  Int       @id @default(autoincrement())
  user_id             String    @unique
  dark_mode           Boolean?  @default(false)
  email_notifications Boolean?  @default(true)
  profile_privacy     Boolean?  @default(false)
  created_at          DateTime? @default(now()) @db.Timestamp(6)
  updated_at          DateTime? @default(now()) @updatedAt @db.Timestamp(6)
  user                User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id], map: "idx_user_preferences_user_id")
  @@map("UserPreferences")
}

enum Role {
  USER
  ADMIN
  SELLER
}