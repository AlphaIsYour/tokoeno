// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  name         String
  email        String        @unique
  password     String?
  photo        String?
  address      String?
  phone        String?
  role         String        @default("USER") // USER, ADMIN, SELLER
  provider     String?
  providerId   String?
  stores       Store[]
  reviews      Review[]
  orders       Order[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Store {
  id          Int        @id @default(autoincrement())
  name        String
  slug        String     @unique
  logo        String?
  description String?
  location    String?
  ownerId     Int
  owner       User       @relation(fields: [ownerId], references: [id])
  products    Product[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  isApproved  Boolean    @default(false)
}

model Product {
  id          Int           @id @default(autoincrement())
  name        String
  price       Int
  stock       Int
  slug        String        @unique
  description String?
  storeId     Int?          // Opsional dulu
  store       Store?        @relation(fields: [storeId], references: [id])
  images      ProductImage[]
  reviews     Review[]
  orders      OrderItem[]
  categories  Category[]    @relation("ProductCategories")
  trending    Trending?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime?     @updatedAt // Opsional dulu
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  url       String
  productId Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id        Int      @id @default(autoincrement())
  name      String
  slug      String   @unique
  imageUrl  String
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  slug      String    @unique
  products  Product[] @relation("ProductCategories")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Order {
  id          Int         @id @default(autoincrement())
  userId      Int
  user        User        @relation(fields: [userId], references: [id])
  total       Int
  status      String      @default("PENDING")
  orderItems  OrderItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Int
  createdAt DateTime @default(now())
}

model Trending {
  id        Int      @id @default(autoincrement())
  productId Int      @unique
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  rank      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}